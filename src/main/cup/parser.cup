package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.files.SymbolTableGenerator;

class Parser;


/*** Elementos Terminales ***/

//Operadores aritméticos
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;

//Operador de asignación
terminal ASSIG;

//Operadores relacionales
terminal EQUAL;
terminal NOT_EQUAL;
terminal LESS_EQUAL;
terminal GREATER_EQUAL;
terminal LESS;
terminal GREATER;

//Operadores lógicos
terminal AND;
terminal OR;
terminal NOT;

//Delimitadores 
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;
terminal COMMA;
terminal COLON;
terminal SEMI_COLON;

//Palabras clave
terminal WHILE;
terminal IF;
terminal ELSE;
terminal INIT;
terminal TYPE_INT;
terminal TYPE_FLOAT;
terminal TYPE_STRING;
terminal READ;
terminal WRITE;

//Funciones especiales del lenguaje
terminal EQUAL_EXPRESSIONS;
terminal TRIANGLE_AREA_MAXIMUM;

//Constantes  
terminal String INTEGER_CONSTANT;
terminal String FLOAT_CONSTANT;
terminal String STRING_CONSTANT;
terminal String BOOLEAN_CONSTANT;

//Identificadores
terminal String IDENTIFIER;


// ----------------------------------------------------
// No terminales
// ----------------------------------------------------
non terminal program;
non terminal statements;
non terminal statement;
non terminal assignment;
non terminal if_statement;
non terminal else_clause;
non terminal while_statement;
non terminal read_statement;
non terminal write_statement;
non terminal expression;
non terminal term;
non terminal factor;
non terminal condition;
non terminal simple_condition;
non terminal compound_condition;
non terminal variable_declaration;
non terminal variable_declaration_list;
non terminal init_block;
non terminal String identifier_list;
non terminal type_specifier;
non terminal triangle;
non terminal point;
non terminal Object expression_list;
non terminal numeric_expression;
non terminal numeric_term;
non terminal numeric_factor;

// ----------------------------------------------------
// Start Symbol
// ----------------------------------------------------
start with program;

// ----------------------------------------------------
// Reglas del parser
// ----------------------------------------------------

program ::= statements {: System.out.println("Inicio del análisis"); :};

statements ::= /* vacío */ 
             | statements statement;

statement ::= assignment
            | if_statement
            | while_statement
            | read_statement
            | write_statement
            | init_block;   

assignment ::=  IDENTIFIER:id ASSIG expression:e
                    {: 
                        System.out.println("[ASSIGNMENT] Id := Expression -> " + id + " := " + e); 
                    :}
                |  IDENTIFIER:id ASSIG STRING_CONSTANT:strc
                    {:
                        System.out.println("[ASSIGNMENT] Id := String Constant -> " + id + " := " + strc); 
                    :};

if_statement ::= IF OPEN_BRACKET condition:cond CLOSE_BRACKET OPEN_CURLY_BRACKET statements CLOSE_CURLY_BRACKET else_clause 
                    {: 
                        System.out.println("[IF] ( Condition ) { Statements } else"); 
                    :};

else_clause ::= /* vacío */ 
                | ELSE OPEN_CURLY_BRACKET statements CLOSE_CURLY_BRACKET 
                    {: 
                        System.out.println("[ELSE] { Statements } "); 
                    :};

while_statement ::= WHILE OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET statements CLOSE_CURLY_BRACKET 
                    {: 
                        System.out.println("[WHILE]  ( Condition )  { Statements }"); 
                    :};

read_statement ::= READ OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET 
                    {: 
                        System.out.println("[READ]  ( Identifier ): " + id); 
                    :};

write_statement ::= WRITE OPEN_BRACKET expression:exp CLOSE_BRACKET 
                    {: 
                        System.out.println("[WRITE] ( Expression ): " + exp); 
                    :} 
                | WRITE OPEN_BRACKET STRING_CONSTANT:sc CLOSE_BRACKET {: 
                        System.out.println("[WRITE] ( String Constante ): " + sc); 
                    :};

expression ::= expression:left PLUS term:right
                    {:
                        System.out.println("[EXPRESSION] Expresion + Term");
                        RESULT = left + "+" + right;
                    :}
                | expression:left SUB term:right 
                    {: 
                        System.out.println("[EXPRESSION] Expresion - Term"); 
                        RESULT = left + "-" + right; 
                    :}
                | term:term
                    {: 
                        System.out.println("[EXPRESSION] Term"); 
                        RESULT = term;
                    :}
                | TRIANGLE_AREA_MAXIMUM OPEN_BRACKET triangle:t1 SEMI_COLON triangle:t2 CLOSE_BRACKET 
                    {: 
                        double area1 = lyc.compiler.files.GeometryUtils.calculateTriangleArea(t1);
                        double area2 = lyc.compiler.files.GeometryUtils.calculateTriangleArea(t2);
                        double maxArea = Math.max(area1, area2);
                        System.out.println("[EXPRESSION] triangleAreaMaximum ( Triangle ; Triangle ): " + maxArea);
                        RESULT = String.valueOf(maxArea);
                    :}
                | EQUAL_EXPRESSIONS OPEN_BRACKET expression_list:el CLOSE_BRACKET
                    {: 
                        String res = lyc.compiler.files.ExpressionUtils.equalExpressions(el);
                        System.out.println("[EXPRESSION] equalExpressions ( Expression List ): " + el);
                        RESULT = res;
                    :};

triangle ::= OPEN_SQUARE_BRACKET point:p1 SEMI_COLON point:p2 SEMI_COLON point:p3 CLOSE_SQUARE_BRACKET 
                    {: 
                        System.out.println("[TRIANGLE] [point ; point ; point ]");
                        RESULT = new Object[]{p1, p2, p3}; 
                    :};

point ::= numeric_expression:x COMMA numeric_expression:y 
                    {: 
                        System.out.println("[POINT] Numeric Expression , Numeric Expression");
                        RESULT = new Object[]{x, y};
                    :};

expression_list ::= expression:exp
                    {: 
                        System.out.println("[EXPRESSION LIST] Expression");
                        java.util.List<Object> list = new java.util.ArrayList<>();
                        list.add(exp);
                        RESULT = list;
                    :}
                | expression_list:list COMMA expression:exp
                    {: 
                        System.out.println("[EXPRESSION LIST] Expression List , Expression");
                        java.util.List<Object> tmp = (java.util.List<Object>) list;
                        tmp.add(exp);
                        RESULT = tmp;
                    :};

term ::= term:left MULT factor:right 
                    {: 
                        System.out.println("[TERM] Term * Factor"); 
                        RESULT = left + "*" + right; 
                    :}
                | term:left DIV factor:right 
                    {: 
                        System.out.println("[TERM] Term / Factor"); 
                        RESULT = left + "/" + right; 
                    :}
                | factor:value 
                    {: 
                        System.out.println("[TERM] Factor");
                        RESULT = value; 
                    :};

factor ::= IDENTIFIER:id 
                    {: 
                        System.out.println("[FACTOR] Identificador: " + id);
                        RESULT = id;
                    :}
                | INTEGER_CONSTANT:intc {: 
                        System.out.println("[FACTOR] Constante Entera: " + intc);
                        RESULT = intc;
                    :}
                | FLOAT_CONSTANT:floatc 
                    {: 
                        System.out.println("[FACTOR] Constante Float: " + floatc);
                        RESULT = floatc;
                    :}
                | OPEN_BRACKET expression:exp CLOSE_BRACKET 
                    {: 
                        System.out.println("[FACTOR] ( Expression )"); 
                        RESULT = "(" + exp + ")"; 
                    :};

// Numeric-only expressions
numeric_expression ::= numeric_expression:left PLUS numeric_term:right 
                    {: 
                        System.out.println("[NUMERIC EXPRESSION] Numeric Expression + Numeric Term");
                        RESULT = left + "+" + right; 
                    :}
                | numeric_expression:left SUB numeric_term:right 
                    {: 
                        System.out.println("[NUMERIC EXPRESSION] Numeric Expression + Numeric Term");
                        RESULT = left + "-" + right; 
                    :}
                | numeric_term:term 
                    {: 
                        System.out.println("[NUMERIC EXPRESSION] Numeric Expression + Numeric Term");
                        RESULT = term; 
                    :};

numeric_term ::= numeric_term:left MULT numeric_factor:right 
                    {: 
                        System.out.println("[NUMERIC TERM] Numeric Term * Numeric Factor");
                        RESULT = left + "*" + right; 
                    :}
                | numeric_term:left DIV numeric_factor:right 
                    {: 
                        System.out.println("[NUMERIC TERM] Numeric Term * Numeric Factor");
                        RESULT = left + "/" + right; 
                    :}
                | numeric_factor:value 
                    {: 
                        System.out.println("[NUMERIC TERM] Numeric Term * Numeric Factor");
                        RESULT = value; 
                    :};

numeric_factor ::= IDENTIFIER:id 
                    {: 
                        System.out.println("[NUMERIC FACTOR] Identifier: " + id);
                        RESULT = id; 
                    :}
                | INTEGER_CONSTANT:intc 
                    {: 
                        System.out.println("[NUMERIC FACTOR]  Integer Constant: " + intc);
                        RESULT = intc; 
                    :}
                | FLOAT_CONSTANT:floatc 
                    {: 
                        System.out.println("[NUMERIC FACTOR] Float Constant: " + floatc);
                        RESULT = floatc; 
                    :}
                | OPEN_BRACKET numeric_expression:exp CLOSE_BRACKET 
                    {: 
                        System.out.println("[NUMERIC FACTOR] Numeric Expression: " + exp);
                        RESULT = exp; 
                    :};

condition ::= simple_condition
                | NOT simple_condition 
                    {: 
                        System.out.println("[CONDITION] NOT Simple Condition"); 
                    :}
                | compound_condition 
                    {: 
                        System.out.println("[CONDITION] Compound Condition"); 
                    :};

simple_condition ::= expression LESS expression 
                    {: 
                        System.out.println("[SIMPLE CONDITION] Expression < Expression"); 
                    :}
                | expression GREATER expression 
                    {: 
                        System.out.println("[SIMPLE CONDITION] Expression > Expression"); 
                    :}
                | expression EQUAL expression 
                    {: 
                        System.out.println("[SIMPLE CONDITION] Expression == Expression");
                    :}
                | expression NOT_EQUAL expression 
                    {: 
                        System.out.println("[SIMPLE CONDITION] Expression != Expression"); 
                    :}
                | expression LESS_EQUAL expression 
                    {: 
                        System.out.println("[SIMPLE CONDITION] Expression <= Expression"); 
                    :}
                | expression GREATER_EQUAL expression 
                    {: 
                        System.out.println("[SIMPLE CONDITION] Expression >= Expression"); 
                    :};

compound_condition ::= simple_condition AND simple_condition 
                    {: 
                        System.out.println("[COMPOUND CONDITION] Condition AND Condition"); 
                    :}
                | simple_condition OR simple_condition 
                    {: 
                        System.out.println("[COMPOUND CONDITION] Condition OR Condition"); 
                    :};

init_block ::= INIT OPEN_CURLY_BRACKET variable_declaration_list CLOSE_CURLY_BRACKET 
                    {: 
                        System.out.println("[INIT BLOCK] Init { variable_declaration_list }"); 
                    :};

variable_declaration ::= identifier_list:list COLON type_specifier:type 
                    {: 
                        System.out.println("[VARIABLE DECLARATION] identifier_list : type_specifier");
                    :};

variable_declaration_list ::= variable_declaration
                    {: 
                        System.out.println("[VAR DECLARATION LIST] variable_declaration");
                    :}
                | variable_declaration_list variable_declaration
                    {: 
                        System.out.println("[VAR DECLARATION LIST] variable_declaration_list variable_declaration");
                    :};

identifier_list ::= IDENTIFIER:id 
                    {: 
                        System.out.println("[IDENTIFIER LIST] Identifier");
                        RESULT = id; 
                    :}
                | identifier_list:list COMMA IDENTIFIER:id 
                    {: 
                        System.out.println("[IDENTIFIER LIST] identifier_list , Identifier");
                        RESULT = list + "," + id; 
                    :};

type_specifier ::= TYPE_INT 
                    {: 
                        System.out.println("[TYPE SPECIFIER] Type Integer" );
                        RESULT = "Int"; 
                    :}
                | TYPE_FLOAT 
                    {: 
                        System.out.println("[TYPE SPECIFIER] Type Float" );
                        RESULT = "Float"; 
                    :}
                | TYPE_STRING 
                    {: 
                        System.out.println("[TYPE SPECIFIER] Type String" );
                        RESULT = "String"; 
                    :};